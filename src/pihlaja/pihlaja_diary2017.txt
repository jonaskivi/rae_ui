2017.3.26 Sunday

Started HdrFlow last monday. Used OpenCV for Optical Flow and FFMPEG for video loading. It has been fast and fun.
Program structure is difficult. I'm sure I'll have trouble with it later. I guess I'll just have to think how to use
less state, and "tell, don't ask" -principle. And to look at my dependencies to be more sane.

I need to put stuff into Pihlaja main class instead of letting the systems handle too much. The main class should
ask the systems to do tasks, and combine the systems together into one system, instead of the systems knowing too
much about each other.

Now I'm thinking, I need some quick way to do a UI system. I have the old NanoVG example project that has some funny
custom windows flying around, and it's a nice project. But my new thinking would be to make it more like a component UI
system. Instead of everything deriving from the Rectangle uber-class, I need to have a rectangle component.
And actually better is to split the visual and the logical functionality into separate components.
In Unity they have the Image component and it is the visual. Then they have a Button component which is the clickable logic. And both of these use the Rect Transform 2D component as their data.

In Rae UI we should have probably something like:

Rect Transform -> Rectangle : the position, size and layout data.
Image -> Image : The visual representation. I guess we should make a wrapper class for ImageBuffer. But why?


2017.3.30 Thursday

class Rectangle
{
	// position in relation to pivot
	vec3 position
	float width
	float height

	// relative diffs in relation to anchors if anchors are spread out.
	float left;
	float right;
	float top;
	float bottom;

	// Anchors are normalized positions in the parent rectangle where this rectangle is anchored to.
	// In Unity, if the anchors min and max are the same, then use position, width and height coords.
	// If the anchors are spread out (different min & max) then use relative left, right etc coords.
	// These are also separated by X and Y min and max.
	vec2 minAnchor; // lower left corner anchor in parent
	vec2 maxAnchor; // upper right corner anchor in parent

	// Pivot determines the internal center from where the position is calculated.
	// It is between 0.0f and 1.0f in both x and y. Y-positive is up.
	// 0,1-----1,1
	// |         |
	// |         |
	// 0,0-----1,0
	vec2 pivot;
	qua rotation;
	vec3 scale;
}

// Hmm This Unity way seems to have a very high learning curve. I've looked at these coord systems for a couple
of months, and still I find it un-intuitive to figure out which parameter is affecting what. And Unity's
automatic compensation system is not helping either. It is just awful.

So how to do layout, and what I'd like to see, and what would I expect.
Simple Rectangles.
Which is better:
pivot in center
or pivot in top right corner?

What to think of Y-up in UI coords?

What did we have in old Rae UI?

3D-space:

Preferred coordinate system:

Maya, Right handed coordinate system
Y-up, Z-out, X-right


   +Y    
    |    
    |    
    |----+X
   /
  /
+Z

This is best because in a 3D-editor the user can easily manipulate all axes.
If Z was going into the screen, then it is more difficult to manipulate it.
This is also Maya and OpenGL convention.

2D-space:

School books always have it like this:
   +Y    
    |    
    |    
    |----+X

But reading direction is Y-down. What to do here...

Y-up is more natural because plus means going up, and minus means going down.

Then center or lower left corner for origin?
Center.
Have an interface class, and let the user use pixel sizes if they want.
Pixel sizes are 1920x1080 virtual resolution pixel sizes.

Hmm. Should we then just use virtual resolution pixel sizes everywhere. But it doesn't make sense.
It is such a random resolution. But at least you get the pixels to match on Full-Hd...
2000x1000 would be much better, but then again, that would just create a funny scaling offset artifact.

1.777 x 1.0
vs
1920.0 x 1080.0
Stored in the Rectangles.
1.0 is better for 3D UIs, but virtual resolution is better for everything else.

0,1-----1,1
|         |
|         |
0,0-----1,0

2---------3
|         |
|         |
0---------1

But with the center thing we get:
0.0 0.0 center
1920 width 1080 height
+960 and +540. Better learn those numbers then.

Screen start is at -960, -540

2017.4.4 Monday

- Refactored to use the TransformSystem.
Thinking about how does UI map into components? We have the Transform (pos rot scale) for the Rectangle.
What else do we need?

// Extents has the problem, that all Rectangles have a center pivot, and the sides are mirrored to an uniform shape.
// If we need to rotate in a non centered way, this becomes a problem, so please no Extents.
struct Extents
{
	vec3 extents;
}

// 2D rectangle has the problem that it is 2D. This is a 3D system. Why not just make it 3D from the start.
// A 2D rect is just a 3D box with 0.0f Z-depth.
struct Rectangle
{
}

// NanoVG can only render 2D on its own. We can of course render that 2D into a framebuffer object (Material)
// and so we can have 3D objects with NanoVG stuff on them.
// But if we go with 3D Box, we could use a special 2D rendering mode, where we just use NanoVG directly.
struct Box
{
	vec3 min;
	vec3 max;
}
or
struct Box
{
	vec3 ;
	vec3 max;
}

class UISystem
{
	Table<Box> m_boxes;
}

2------------------------------3
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
|                              |
0------------------------------1


2017.12.22

Good string functions for doing permutations:

std::random_shuffle(name.begin(), name.end());
std::next_permutation(name.begin(), name.end());
std::prev_permutation(name.begin(), name.end());

2018.01.11

I tested a couple parallel_for implementations and this was slightly slower:

template<typename Index, typename Callable>
static void parallel_for(Index start, Index end, Callable func)
{
	// Estimate number of threads in the pool
	const static unsigned nb_threads_hint = std::thread::hardware_concurrency();
	const static unsigned nb_threads = (nb_threads_hint == 0u ? 8u : nb_threads_hint);

	// Size of a slice for the range functions
	Index n = end - start + 1;
	Index slice = (Index) std::round(n / static_cast<double> (nb_threads));
	slice = std::max(slice, Index(1));

	// [Helper] Inner loop
	auto launchRange = [&func] (int k1, int k2)
	{
		for (Index k = k1; k < k2; ++k)
		{
			func(k);
		}
	};

	// Create pool and launch jobs
	std::vector<std::thread> pool;
	pool.reserve(nb_threads);
	Index i1 = start;
	Index i2 = std::min(start + slice, end);
	for (unsigned i = 0; i + 1 < nb_threads && i1 < end; ++i)
	{
		pool.emplace_back(launchRange, i1, i2);
		i1 = i2;
		i2 = std::min(i2 + slice, end);
	}

	if (i1 < end)
	{
		pool.emplace_back(launchRange, i1, end);
	}

	// Wait for jobs to finish
	for (std::thread& t : pool)
	{
		if (t.joinable())
		{
			t.join();
		}
	}
}

and this was the slighly faster version:

template<typename Callable>
static void parallel_for(int start, int end, Callable func)
{
	const static size_t threadCountHint = std::thread::hardware_concurrency();
	const static size_t threadCount = (threadCountHint == 0 ? 8 : threadCountHint);

	std::vector<std::thread> threads(threadCount);

	for (int t = 0; t < threadCount; ++t)
	{
		threads[t] = std::thread(std::bind(
		[&](const int bi, const int ei, const int t)
		{
			for (int j = bi; j < ei; ++j)
			{
				func(j);
			}
		}, t * end / threadCount, (t+1) == threadCount ? end : (t+1) * end / threadCount, t));
	}

	std::for_each(threads.begin(),threads.end(), [](std::thread& x)
	{
		x.join();
	});
}




